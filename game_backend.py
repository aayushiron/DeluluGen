import openai
import json
import re
import random

openai.api_key_path = 'openai_key'

stats = {}
messages = [{'role': 'system', \
             'content': 'You are going to control a game defined by a ' + 
                         'prompt given to you. You will create the player\'s ' +
                         'character a full background and will generate all their stats. ' +
                         'You will add the struct ITEMSTATS: {"Health"\: <health>, ' +
                         '"SP"\: <sp>, "Items"\: []} ' +
                         'at the end of all your messages'}, \
            ]

sentiment_message = [
    {
        'role': 'system', \
        'content': 'You are a sentiment analysis detector that detects if text is angry, sad, happy ' +\
                'or neutral. If the text is angry, you will reply with only \'A\'. If the text is sad, ' +\
                'you will reply with only \'S\'. If the text is neutral, you will reply with only \'N\'.  If the ' +\
                'text is happy, you will reply with only \'H\'.',
    }, 
    {
        'role': 'user', 'content': 'I\'m so pissed!'
    },
    {
        'role': 'assistant', 'content': 'A'
    }
]

happy_emojis = ['q(‚âß‚ñΩ‚â¶q)', '„Éæ(‚âß‚ñΩ‚â¶*)o', 'œà(ÔΩÄ‚àá¬¥)œà', 'O(‚à©_‚à©)O', '(‚úø‚ó°‚Äø‚ó°)', '(*^_^*)', '(*^‚ñΩ^*)', '\^o^/', 'o(*^‚ñΩ^*)‚îõ', '(‚âß‚àÄ‚â¶)„Çû', '( $ _ $ )', '(/‚âß‚ñΩ‚â¶)/', '„Éæ(‚âß ‚ñΩ ‚â¶)„Çù', 'o((>œâ< ))o', '(‚òÜ‚ñΩ‚òÜ)', '( ‚Ä¢ÃÄ œâ ‚Ä¢ÃÅ )y']
angry_emojis = ['‚ï∞Ôºà‚Äµ‚ñ°‚Ä≤Ôºâ‚ïØ', '(‚ï¨‚ñîÁöø‚ñî)‚ïØ', 'Ôø£„Å∏Ôø£', '( ÀòÔ∏πÀò )', '‚ïö(‚Ä¢‚åÇ‚Ä¢)‚ïù', '‚óã|Ôø£|_ =3', '(¬∞„É≠¬∞)', '(‚ïØ‚ñîÁöø‚ñî)‚ïØ', '(‚ïØ‚Äµ‚ñ°‚Ä≤)‚ïØÔ∏µ‚îª‚îÅ‚îª', '‡≤†‚ï≠‚ïÆ‡≤†', '(„ÜÜ_„ÜÜ)', '‡≤†‡≤ø_‡≤†']
sad_emojis = ['/_ \\', 'ÔºûÔπèÔºú', '(„Å£ ¬∞–î ¬∞;)„Å£', '‡≤•_‡≤•', '~~>_<~~', 'XÔπèX', '‚îó( TÔπèT )‚îõ', '(Ôºõ‚Ä≤‚åí`)', '‡Æá‡Ø∞‡Æá', '<(Ôºø„ÄÄÔºø)>', 'XÔπèX', '(;¬¥‡ºé‡∫∂–î‡ºé‡∫∂`)', 'o(Ôø£‚î∞Ôø£*)„Çû']
neutral_emojis = ['(^‰∫∫^)', 'œà(._. )>', '(‚ìø_‚ìø)', '=Ôø£œâÔø£=', '(‚úø‚óï‚Äø‚óï‚úø)', '(Ôø£ÔπÉÔø£)', '(^‚óï.‚óï^)', '( ò·¥• ò)', '(^._.^)Ôæâ', '( Õ°~ Õú ñ Õ°¬∞)', '( Õ°¬∞ Õú ñ Õ°¬∞)', '( Õ°‚Ä¢ Õú ñ Õ°‚Ä¢ )', '( ò Õú ñ  ò)', '·ìö·òè·ó¢', '‡∏Ö ï‚Ä¢Õ°Ã´‚Ä¢ î‡∏Ö', '( Õ†¬∞ Õü ñ Õ°¬∞)', '(:‚â°']
confused_emojis = ['¬Ø\_(„ÉÑ)_/¬Ø', '¬Ø\_( Õ°¬∞ Õú ñ Õ°¬∞)_/¬Ø', 'ÔººÔºà„Äá_ÔΩèÔºâÔºè', '(¬¥ÔΩ•œâÔΩ•`)?', '¬Ø\(¬∞_o)/¬Ø', '„Ñü( ‚ñî, ‚ñî )„Ñè', '(+_+)?', '‚ïÆ(‚ïØ-‚ï∞)‚ï≠', '(Ôø£_Ôø£|||)', '‚îë(Ôø£–î Ôø£)‚îç', '‚óâ_‚óâ', '‚ïÆ(‚ïØ‚ñΩ‚ï∞)‚ï≠', '(Àâ‚ñΩÀâÔºõ)...']

def display_stats():
    # print(stats)
    for stat in stats:
        print(stat + ": " + str(stats[stat]))
        if stat == 'Items':
            for item in stats['Items']:
                print(item)

def process_response(response):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=messages
    )
    message_resp = response['choices'][0]['message']['content']
    message_piece = message_resp.split('ITEMSTATS: ')
    if len(message_piece) == 1:
        messages.append({'role': response['choices'][0]['message']['role'], 'content': message_resp})
        mess_copy = messages
        mess_copy.append({'role':'user', 'content': 'give me ITEMSTATS'})
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=mess_copy
        )
        message_resp += response['choices'][0]['message']['content']
        # if len(message_resp.split('ITEMSTATS: ')) != 2:
        #     print('-------------------------------------------------')
        #     print(message_resp)
        message_piece.append(message_resp.split('ITEMSTATS: ')[1])

    message, stats_str = message_piece
    search = re.search("{[^{}]*}", stats_str)
    return message.strip(), json.loads(search.group())

def prompt_user(prompt):
    # prompt = input('Please describe the setting of the game you want to play:\n> ')
    messages.append({'role':'user', 'content': 'Prompt: ' + prompt})
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=messages
        )
        message_resp = response['choices'][0]['message']['content']
        message, stat = process_response(message_resp)
    except:
        return "Error: ChatGPT is being mean üêÑ. The prompt might be invalid.", 1
    global stats
    stats = stat
    return message, 0
    # print(message)

def game_loop(prompt):
    # prompt = input('\n> ')
    if prompt == 'stats':
        display_stats()
    else:
        messages.append({'role':'user', 'content': prompt})
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=messages
            )
            message_resp = response['choices'][0]['message']['content']
            message, stat = process_response(message_resp)
        except Exception as e:
            print(e)
            return "Error: ChatGPT is being mean üêÑ. Try again in 20s.", 1
        global stats
        stats = stat
        messages.append({'role': response['choices'][0]['message']['role'], 'content': message})
        return message, 0
        # print(message)

def sentiment_emoji(message):
    if message[:5] == 'ERROR':
        return random.choice(sad_emojis)
    sent = sentiment_message + [{'role':'user', 'content': message}]
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=sent
        )
        message_resp = response['choices'][0]['message']['content'].strip()
        if (message_resp[0] == 'S'):
            return random.choice(sad_emojis)
        elif (message_resp[0] == 'H'):
            return random.choice(happy_emojis)
        elif (message_resp[0] == 'A'):
            return random.choice(angry_emojis)
        elif (message_resp[0] == 'N'):
            return random.choice(neutral_emojis)
        else:
            return random.choice(confused_emojis)
    except:
        return random.choice(confused_emojis)

# prompt_user()

# while (True):
#     game_loop()


